[MySQL 12/10] 


DBMS(DatBase Managemnet System)

Relational - 관계형 데이터베이스

Document   - 비관계형 데이터베이스
Key-value    - 비관계형 데이터베이스



ORM(Object Ralation Model)
데이터베이스 (테이블 - 엑셀 시트)-- Class  

CRUD
Create - 데이터를 입력
Read - 저장된 데이터를 읽어 오는 것
Update - 수정
Delete - 삭제


Query(질의어)Language


Sever 데이터를 처리 하는 기술 
- JPA :쿼리를 많이 사용 안해도 됨
- Mybatis :100% 쿼리를 사용하여 작업

raw data(원시데이터)


---------------------------------------------------------------------------
무결성
올바른 데이터들을 저장하도록 함
영속성
한번 저장된 데이터는 잘 저장되어있어야하는?
---------------------------------------------------------------------------
pk (primary key )  : not null; , 유일하다 . 
fk(foreign key)  
둘의 관계..?
* 1- pk
  다쪽 - fk
---------------------------------------------------------------------------
SQL(Structured Query Language) --구조적 질의어(시퀄)

DDL(DataBase Definition Language) -데이터베이스 정의어
-데이터베이스를 생성할때 , 수정/삭제 

**DML(DataBase Manipulation Language) - 데이터베이스 조작어 
-데이티터베이스를 조작할 때 사용
---------------------------------------------------------------------------
CMD  

> ipconfig

>netstat -an

localhost - 내 컴퓨터 
    = 
12.0.0.1 -내 컴퓨터

0.0.0.0 - 모든 IP주소 

localhost:8080 -(localhost) 호스트 주소 : (8080) port


* 컴퓨터 port란?
 

---------------------------------------------------------------------------


MySQL 다운로드 

https://dev.mysql.com/downloads/file/?id=536356

1.
Full - Next- Excute

이름은 Root 

비밀번호 1111
            1111

마지막 체크 두개 x

CMD

mysql -uroot -p

환경변수 
프로그램파일스- mysql 서버 8.0  -bin - mysql.exe 실행할 애 

Path 
시스템변수 path - 새로 만들기  - 주소복사 - 확인 ~
---------------------------------------------------------------------------
cmd

mysql -uroot -p

show databases;

use world;

show tables;

describe city;

show databases;

create database test_db default character set utf8mb4;

---------------------------------------------------------------------------
[MySQL 12/11]

1. _기본

[DB] 무결성 제약조건 (Integrity Constraint)
primary key 먼저 등록되어있어야함.(메뉴판)
foreign key primary key를 참조하고 있는 ?


tuple=레코드


cmd
테이블 구조 보는 -  desc



<<테이블 만들기>>
mysql> create database test _db;
->Query OK, 1 row affected (0.01 sec)

mysql> show databases;
->
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sakila             |
| sys                |
| test_db            |
| world              |
+--------------------+
7 rows in set (0.00 sec)

mysql> use test_db;
->Database changed

mysql> create table sample(테이블 이름)(
    -> id int primary key auto_increment,
    -> name varchar(20) not null,
    -> address varchar(200),
    -> phone varchar(20)
    -> );                          // 필드 순서 상관없음.

->Query OK, 0 rows affected (0.03 sec)


mysql> insert into sample(테이블 이름) (name, phone)
    -> values ('김형민','010-0000-0000');
-->Query OK, 1 row affected (0.01 sec)  // 하나의 행 생김

mysql> select * from sample;     //안에 내용확인 
+----+--------+---------+---------------+
| id | name   | address | phone         |
+----+--------+---------+---------------+
|  1 | 김형민 | NULL    | 010-0000-0000 |
+----+--------+---------+---------------+
1 row in set (0.00 sec)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

<<문제>>
table name : professor
자동증가
p_id       name    belong             phone
        1  유재석   COMPUTER   010-1234-5678
        2  황영조   SPORTS       010-2134-2443
        3  케이멀   DANCE        010-2342-4343
        4  호날두   ENGLISH      010-3434-3222
        5  김형민   COMPUTER   010-2343-2432


create table professor(
id int primary key auto_increment,
name varchar(20) not null,
belong varchar(200),
phone varchar(20)
);


sourceC:\$_HYOJIN\db\professor.sql

---->desc professor;


insert into professor (name, belong, phone)
values('유재석','COMPUTER','010-1234-5678')
insert into professor (name, belong, phone)
values('황영조','SPORTS','010-2134-2443')
insert into professor (name, belong, phone)
values('케이멀','DANCE','010-2342-4343')
insert into professor (name, belong, phone)
values('호날두','ENGLISH','010-3434-3222')
insert into professor (name, belong, phone)
values('김형민','COMPUTER','010-2343-2432')
+
insert into professor
values(100, '홍길동', 'HISTORY','01088889999')
insert into professor 
values(7, '고길동', HISTORY', '01022223333');



삭제하는 명령 -- delete from professor;

                     drop table professor; 




==========================
**더 간단하게 집어넣는 방법 ** 

insert into professor (name, belong, phone)
values('유재석','COMPUTER','010-1234-5678'),
('황영조','SPORTS','010-2134-2443'),
('케이멀','DANCE','010-2342-4343'),
('호날두','ENGLISH','010-3434-3222'),
('김형민','COMPUTER','010-2343-2432');


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


문제 - student

Active code page: 65001

C:\Users\80418>mysql -u first -p
Enter password: ****
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 44
Server version: 8.0.40 MySQL Community Server - GPL

Copyright (c) 2000, 2024, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| performance_schema |
| test_db            |
+--------------------+
3 rows in set (0.00 sec)

mysql> use test_db;
Database changed
mysql> source C:\$_HYOJIN\db\student_schema.sql
Query OK, 0 rows affected, 1 warning (0.00 sec)

Query OK, 0 rows affected (0.03 sec)

mysql> source C:\$_HYOJIN\db\student_data.sql
Query OK, 16 rows affected (0.01 sec)
Records: 16  Duplicates: 0  Warnings: 0

mysql> show tables;
+-------------------+
| Tables_in_test_db |
+-------------------+
| professor         |
| sample            |
| student           |
+-------------------+
3 rows in set (0.00 sec)

mysql> select * from student;
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080104 | 나미      | COMPUTER | 01023432432 |      3 |
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
| 20090101 | 루피      | COMPUTER | 01012345678 |      1 |
| 20090105 | 쵸파      | MUSIC    | 01012342433 |      3 |
| 20090301 | 에릭      | DANCE    | 01032424244 |      2 |
| 20090302 | 전진      | COMPUTER | 01012321313 |      3 |
| 20090503 | 피콜로    | MUSIC    | 01013634645 |      3 |
| 20090509 | 셀        | DANCE    | 01032427535 |      3 |
| 20100102 | 조로      | MUSIC    | 01023435343 |      2 |
| 20100204 | 버기      | DANCE    | 01023424343 |      2 |
| 20100505 | 오공      | MUSIC    | 01023534644 |      2 |
| 20100507 | 베지터    | DANCE    | 01023423623 |      2 |
| 20110103 | 상디      | SPORTS   | 01021342443 |      1 |
| 20110106 | 프랑키    | ENGLISH  | 01034343222 |      1 |
| 20110502 | 부우      | ENGLISH  | 01034332634 |      1 |
| 20110506 | 오천      | SPORTS   | 01021334525 |      1 |
+----------+-----------+----------+-------------+--------+
16 rows in set (0.00 sec)




ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

**프로젝트 하나당 데이터베이스 하나 ~~

create user first@'%' identified by '1111';
mysql -ufirst -p

data type
정수 : in, bigint(Long)
실수 : double
문자 : char(10) --- 길이고정형
        varchar(100) --가변길이문자형
//      오라클 : varchar2(100).. ms-sql : nvarchar(100)

날짜 : datetime, timestamp 
boolean : tinyint 

---------------------------------------------------------------------------

* UTP -8 로 바꿔주는 

C:\Users\80418>chcp
활성 코드 페이지: 949

C:\Users\80418>65001
---------------------------------------------------------------------------


[MySQL 12/12]

<<테이블 만들기>>
>>
UTP -8 로 바꿔주기 
C:\Users\80418>chcp
활성 코드 페이지: 949
C:\Users\80418>65001
>> create database test _db; 
>> show databases;  - 데이터가 먼저 있는지 확인.
>> use test_db;
>> show tables;  -테이블 확인
>> desc 테이블 이름 (professor);  - professor 안에 테이블 구조 확인 
>> drop table (테이블이름) --테이블 삭제 
>> select * from professor;  --professor 안에 있는거 확인.
>> selcet (belon,phone 등 보고싶은것 //여러개 가능) from (테이블이름) ;
     ex) mysql> select phone from student; 


<<문제 1. professor>>
================================================================
table name : professor
자동증가
p_id       name    belong             phone
        1  유재석   COMPUTER   010-1234-5678
        2  황영조   SPORTS       010-2134-2443
        3  케이멀   DANCE        010-2342-4343
        4  호날두   ENGLISH      010-3434-3222
        5  김형민   COMPUTER   010-2343-2432

create table professor(
p_id int primary key auto_increment,
name varchar(20) not null,
belong varchar(20),
phone varchar(20) );
------------------------------------------------------------

insert into professor (name, belong, phone)
values('유재석','COMPUTER','010-1234-5678')
insert into professor (name, belong, phone)
values('황영조','SPORTS','010-2134-2443')
insert into professor (name, belong, phone)
values('케이멀','DANCE','010-2342-4343')
insert into professor (name, belong, phone)
values('호날두','ENGLISH','010-3434-3222')
insert into professor (name, belong, phone)
values('김형민','COMPUTER','010-2343-2432') 
            
↓

**더 간단하게 집어넣는 방법 ** 

insert into professor (name, belong, phone)
values('유재석','COMPUTER','010-1234-5678'),
('황영조','SPORTS','010-2134-2443'),
('케이멀','DANCE','010-2342-4343'),
('호날두','ENGLISH','010-3434-3222'),
('김형민','COMPUTER','010-2343-2432');


==> 결과 확인 <==
mysql> select * from professor;
+------+-----------+----------+---------------+
| p_id | name      | belong   | phone         |
+------+-----------+----------+---------------+
|    1 | 유재석    | COMPUTER | 010-1234-5678 |    <레코드>
|    2 | 황영조    | SPORTS   | 010-2134-2443 |
|    3 | 케이멀    | DANCE    | 010-2342-4343 |
|    4 | 호날두    | ENGLISH  | 010-3434-3222 |
|    5 | 김형민    | COMPUTER | 010-2343-2432 |
+------+-----------+----------+---------------+

<필드>

5 rows in set (0.00 sec)


================================================================


<<문제 2. student r>>

DROP TABLE if exists STUDENT;

CREATE TABLE student
(
     s_id CHAR(9),
     name VARCHAR(48) NOT NULL,
     belong VARCHAR(20),
     phone VARCHAR(20),
     status INT DEFAULT 0,
     primary key (s_id)
	
);

INSERT INTO student VALUES('20090101', '루피', 'COMPUTER', '01012345678', 1);
INSERT INTO student VALUES('20100102', '조로', 'MUSIC', '01023435343', 2);
INSERT INTO student VALUES('20110103', '상디', 'SPORTS', '01021342443', 1);
INSERT INTO student VALUES('20100204', '버기', 'DANCE', '01023424343', 2);
INSERT INTO student VALUES('20110106', '프랑키', 'ENGLISH', '01034343222' , 1);
INSERT INTO student VALUES('20080104', '나미', 'COMPUTER', '01023432432', 3);
INSERT INTO student VALUES('20090105', '쵸파', 'MUSIC', '01012342433', 3);
INSERT INTO student VALUES('20090301', '에릭', 'DANCE', '01032424244', 2);
INSERT INTO student VALUES('20090302', '전진', 'COMPUTER', '01012321313', 3);
INSERT INTO student VALUES('20100505', '오공', 'MUSIC', '01023534644', 2);
INSERT INTO student VALUES('20110506', '오천', 'SPORTS', '01021334525', 1);
INSERT INTO student VALUES('20100507', '베지터', 'DANCE', '01023423623', 2);
INSERT INTO student VALUES('20110502', '부우', 'ENGLISH', '01034332634', 1);
INSERT INTO student VALUES('20080501', '크리링', 'COMPUTER', '01023436346', 2);
INSERT INTO student VALUES('20090503', '피콜로', 'MUSIC', '01013634645', 3);
INSERT INTO student VALUES('20090509', '셀', 'DANCE', '01032427535', 3);

== > 따로 저장 db폴더 안에 
mysql> source C:\$_HYOJIN\db\student_schema.sql
Query OK, 0 rows affected, 1 warning (0.00 sec)

Query OK, 0 rows affected (0.03 sec)

mysql> source C:\$_HYOJIN\db\student_data.sql
Query OK, 16 rows affected (0.01 sec)
Records: 16  Duplicates: 0  Warnings: 0


==> 결과 확인 <==
mysql> show tables;
+-------------------+
| Tables_in_test_db |
+-------------------+
| professor         |
| sample            |
| student           |
+-------------------+
3 rows in set (0.00 sec)

mysql> select * from student;
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080104 | 나미      | COMPUTER | 01023432432 |      3 |
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
| 20090101 | 루피      | COMPUTER | 01012345678 |      1 |
| 20090105 | 쵸파      | MUSIC    | 01012342433 |      3 |
| 20090301 | 에릭      | DANCE    | 01032424244 |      2 |
| 20090302 | 전진      | COMPUTER | 01012321313 |      3 |
| 20090503 | 피콜로    | MUSIC    | 01013634645 |      3 |
| 20090509 | 셀        | DANCE    | 01032427535 |      3 |
| 20100102 | 조로      | MUSIC    | 01023435343 |      2 |
| 20100204 | 버기      | DANCE    | 01023424343 |      2 |
| 20100505 | 오공      | MUSIC    | 01023534644 |      2 |
| 20100507 | 베지터    | DANCE    | 01023423623 |      2 |
| 20110103 | 상디      | SPORTS   | 01021342443 |      1 |
| 20110106 | 프랑키    | ENGLISH  | 01034343222 |      1 |
| 20110502 | 부우      | ENGLISH  | 01034332634 |      1 |
| 20110506 | 오천      | SPORTS   | 01021334525 |      1 |
+----------+-----------+----------+-------------+--------+
16 rows in set (0.00 sec)

================================================================

<<정렬>>
select * from  테이블이름;
select name, phone, from 테이블
    조건  where 1. 필드명 = ' O ' And,Or  필드명 =123
                    2. num >= 1 Or num <=10
                    3. num between 1 And 10
                    4. belong in ('computer', 'dance')
                    5. belong like '%찾는문자 %'  c로 시작하는 단어 다 찾고싶으면 c%  
            Order By name  asc   - 오름차순 
                                desc  - 내림차순
=================================================================

mysql> select 1+2; 
mysql> select 7 mod 3;  // mod 나머지 확인
mysql> select 3 mod 7 as 나머지 ;    // as로 쓴거를 필드명으로 ?
+-----------+
| 나머지    |
+-----------+
|         3 |
+-----------+
1 row in set (0.00 sec)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

mysql> select name from student order by name asc; => 네임을 오름차순으로 정렬 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

mysql> select name, belong from student --- student 안에 name과 belong 보여주기
    -> order by belong asc;       ---belong 오름차순으로  

// asc , desc 생략하면 기본 오름차순                

==> 결과 확인 <== 
+-----------+----------+
| name      | belong   |
+-----------+----------+
| 나미      | COMPUTER |
| 크리링    | COMPUTER |
| 루피      | COMPUTER |
| 전진      | COMPUTER |
| 에릭      | DANCE    |
| 셀        | DANCE    |
| 버기      | DANCE    |
| 베지터    | DANCE    |
| 프랑키    | ENGLISH  |
| 부우      | ENGLISH  |
| 쵸파      | MUSIC    |
| 피콜로    | MUSIC    |
| 조로      | MUSIC    |
| 오공      | MUSIC    |
| 상디      | SPORTS   |
| 오천      | SPORTS   |
+-----------+----------+

16 rows in set (0.00 sec)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

mysql> select name, belong from student ---student 안에 name과 belong 보여주기
    -> order by belong asc, name desc;     ---belong 오름차순으로  name 내림차순으로 정렬하여 보여주기
 
==> 결과 확인 <== 

+-----------+----------+
| name      | belong   |
+-----------+----------+
| 크리링    | COMPUTER |
| 전진      | COMPUTER |
| 루피      | COMPUTER |
| 나미      | COMPUTER |
| 에릭      | DANCE    |
| 셀        | DANCE    |
| 베지터    | DANCE    |
| 버기      | DANCE    |
| 프랑키    | ENGLISH  |
| 부우      | ENGLISH  |
| 피콜로    | MUSIC    |
| 쵸파      | MUSIC    |
| 조로      | MUSIC    |
| 오공      | MUSIC    |
| 오천      | SPORTS   |
| 상디      | SPORTS   |
+-----------+----------+
1
6 rows in set (0.00 sec)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

mysql> select distinct belong from student;    //  distinct 중복된거 하나만 보이게 하기 
+----------+
| belong   |
+----------+
| COMPUTER |
| MUSIC    |
| DANCE    |
| SPORTS   |
| ENGLISH  |
+----------+
5 rows in set (0.00 sec)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
mysql> select name, phone from student
    -> order by name asc
    -> limit 5;                                //limit -내가 검색한것중 몇개가지고 올지 
+-----------+-------------+
| name      | phone       |
+-----------+-------------+
| 나미      | 01023432432 |
| 루피      | 01012345678 |
| 버기      | 01023424343 |
| 베지터    | 01023423623 |
| 부우      | 01034332634 |
+-----------+-------------+
5 rows in set (0.00 sec)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
mysql> select *from professor;
+------+-----------+----------+---------------+
| p_id | name      | belong   | phone         |
+------+-----------+----------+---------------+
|    1 | 유재석    | COMPUTER | 010-1234-5678 |
|    2 | 황영조    | SPORTS   | 010-2134-2443 |
|    3 | 케이멀    | DANCE    | 010-2342-4343 |
|    4 | 호날두    | ENGLISH  | 010-3434-3222 |
|    5 | 김형민    | COMPUTER | 010-2343-2432 |
+------+-----------+----------+---------------+
5 rows in set (0.00 sec)

mysql> select *from professor limit 1;
+------+-----------+----------+---------------+
| p_id | name      | belong   | phone         |
+------+-----------+----------+---------------+
|    1 | 유재석    | COMPUTER | 010-1234-5678 |
+------+-----------+----------+---------------+
1 row in set (0.00 sec)

====5개중 1개만 가지고 올때

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

mysql> select * from student
    -> where belong = 'dance' ;
+----------+-----------+--------+-------------+--------+
| s_id     | name      | belong | phone       | status |
+----------+-----------+--------+-------------+--------+
| 20090301 | 에릭      | DANCE  | 01032424244 |      2 |
| 20090509 | 셀        | DANCE  | 01032427535 |      3 |
| 20100204 | 버기      | DANCE  | 01023424343 |      2 |
| 20100507 | 베지터    | DANCE  | 01023423623 |      2 |
+----------+-----------+--------+-------------+--------+
4 rows in set (0.00 sec)


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
mysql> select * from student
    -> where belong = 'dance' or belong = 'sports';
+----------+-----------+--------+-------------+--------+
| s_id     | name      | belong | phone       | status |
+----------+-----------+--------+-------------+--------+
| 20090301 | 에릭      | DANCE  | 01032424244 |      2 |
| 20090509 | 셀        | DANCE  | 01032427535 |      3 |
| 20100204 | 버기      | DANCE  | 01023424343 |      2 |
| 20100507 | 베지터    | DANCE  | 01023423623 |      2 |
| 20110103 | 상디      | SPORTS | 01021342443 |      1 |
| 20110506 | 오천      | SPORTS | 01021334525 |      1 |
+----------+-----------+--------+-------------+--------+
6 rows in set (0.00 sec)


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


mysql> select *from student
    -> where belong = 'computer'
    -> order by name desc;
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
| 20090302 | 전진      | COMPUTER | 01012321313 |      3 |2
| 20090101 | 루피      | COMPUTER | 01012345678 |      1 |
| 20080104 | 나미      | COMPUTER | 01023432432 |      3 |
+----------+-----------+----------+-------------+--------+
4 rows in set (0.00 sec)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

mysql> select * from student
    -> where status >=2 and status <=3;
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080104 | 나미      | COMPUTER | 01023432432 |      3 |
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
| 20090105 | 쵸파      | MUSIC    | 01012342433 |      3 |
| 20090301 | 에릭      | DANCE    | 01032424244 |      2 |
| 20090302 | 전진      | COMPUTER | 01012321313 |      3 |
| 20090503 | 피콜로    | MUSIC    | 01013634645 |      3 |
| 20090509 | 셀        | DANCE    | 01032427535 |      3 |
| 20100102 | 조로      | MUSIC    | 01023435343 |      2 |
| 20100204 | 버기      | DANCE    | 01023424343 |      2 |
| 20100505 | 오공      | MUSIC    | 01023534644 |      2 |
| 20100507 | 베지터    | DANCE    | 01023423623 |      2 |
+----------+-----------+----------+-------------+--------+
11 rows in set (0.00 sec)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

mysql> select * from student
    -> where s_id < '201000000';
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080104 | 나미      | COMPUTER | 01023432432 |      3 |
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
| 20090101 | 루피      | COMPUTER | 01012345678 |      1 |
| 20090105 | 쵸파      | MUSIC    | 01012342433 |      3 |
| 20090301 | 에릭      | DANCE    | 01032424244 |      2 |
| 20090302 | 전진      | COMPUTER | 01012321313 |      3 |
| 20090503 | 피콜로    | MUSIC    | 01013634645 |      3 |
| 20090509 | 셀        | DANCE    | 01032427535 |      3 |
+----------+-----------+----------+-------------+--------+
8 rows in set (0.00 sec)
 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


**더 간단하게 찾는 방법**

필드명 like ''

% : 공백을 포함한 모든 것들
_  : 무조건 갯수만큼 문자 필요 


mysql> select * from student
    -> where s_id like '2008%';      - '2008로 시작하는 '
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080104 | 나미      | COMPUTER | 01023432432 |      3 |
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
+----------+-----------+----------+-------------+--------+
2 rows in set (0.00 sec)



mysql> select *from student
    -> where belong like '%pu%';
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080104 | 나미      | COMPUTER | 01023432432 |      3 |
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
| 20090101 | 루피      | COMPUTER | 01012345678 |      1 |
| 20090302 | 전진      | COMPUTER | 01012321313 |      3 |
+----------+-----------+----------+-------------+--------+
4 rows in set (0.00 sec)

 

//이름이 '피' 들어간 사람 찾기 

mysql> select *from student
    -> where name like '%피%';
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20090101 | 루피      | COMPUTER | 01012345678 |      1 |
| 20090503 | 피콜로    | MUSIC    | 01013634645 |      3 |
+----------+-----------+----------+-------------+--------+
2 rows in set (0.00 sec)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


<<문제>>
2011로 시작하는 학생의
아이디, 이름, 소속을 출력합니다.
(단, 소속별로 오름차순, 같은소속이면 이름의 내림차순으로 정렬)

mysql> select s_id, name , belong from student
    -> where s_id like '2011%'
    -> order by belong asc, name desc;
+----------+-----------+---------+
| s_id     | name      | belong  |
+----------+-----------+---------+
| 20110106 | 프랑키    | ENGLISH |
| 20110502 | 부우      | ENGLISH |
| 20110506 | 오천      | SPORTS  |
| 20110103 | 상디      | SPORTS  |
+----------+-----------+---------+
4 rows in set (0.00 sec)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

<<문제>>
소속이 컴퓨터가 아닌 학생의 이름과 소속을 출력 

방법 1.
mysql> select name, belong from student
    -> where belong <> 'computer';    // <> = 같지 않다.
+-----------+---------+
| name      | belong  |
+-----------+---------+
| 쵸파      | MUSIC   |
| 에릭      | DANCE   |
| 피콜로    | MUSIC   |
| 셀        | DANCE   |
| 조로      | MUSIC   |
| 버기      | DANCE   |
| 오공      | MUSIC   |
| 베지터    | DANCE   |
| 상디      | SPORTS  |
| 프랑키    | ENGLISH |
| 부우      | ENGLISH |
| 오천      | SPORTS  |
+-----------+---------+
12 rows in set (0.00 sec)

방법 2. 
mysql> select name, belong from student
    -> where belong not like 'com%';
+-----------+---------+
| name      | belong  |
+-----------+---------+
| 쵸파      | MUSIC   |
| 에릭      | DANCE   |
| 피콜로    | MUSIC   |
| 셀        | DANCE   |
| 조로      | MUSIC   |
| 버기      | DANCE   |
| 오공      | MUSIC   |
| 베지터    | DANCE   |
| 상디      | SPORTS  |
| 프랑키    | ENGLISH |
| 부우      | ENGLISH |
| 오천      | SPORTS  |
+-----------+---------+
12 rows in set (0.00 sec)

방법 3.
mysql> select name, belong from student
    -> where not belong = 'computer';
+-----------+---------+
| name      | belong  |
+-----------+---------+
| 쵸파      | MUSIC   |
| 에릭      | DANCE   |
| 피콜로    | MUSIC   |
| 셀        | DANCE   |
| 조로      | MUSIC   |
| 버기      | DANCE   |
| 오공      | MUSIC   |
| 베지터    | DANCE   |
| 상디      | SPORTS  |
| 프랑키    | ENGLISH |
| 부우      | ENGLISH |
| 오천      | SPORTS  |
+-----------+---------+
12 rows in set (0.00 sec)
=================================================================

---------------------------------------------------------------------------

[Mysql 12/16]

create table 테이블명(
필드명 타입 제약조건,)

id, name, address, phone

create table telbook(
id int primary key auto_increment,
name varchar(20) not null,
address varchar(200),
phone varchar
);



belong이 dance 또는 sports
mysql> select*from student
    -> where belong = 'dance' or belong ='sports';
+----------+--------+--------+-------------+--------+
| s_id     | name   | belong | phone       | status |
+----------+--------+--------+-------------+--------+
| 20090301 | 에릭   | DANCE  | 01032424244 |      2 |
| 20090509 | 셀     | DANCE  | 01032427535 |      3 |
| 20100204 | 버기   | DANCE  | 01023424343 |      2 |
| 20100507 | 베지터 | DANCE  | 01023423623 |      2 |
| 20110103 | 상디   | SPORTS | 01021342443 |      1 |
| 20110506 | 오천   | SPORTS | 01021334525 |      1 |
+----------+--------+--------+-------------+--------+
6 rows in set (0.00 sec)

-> where belong in('dance','sports'); 

* in = or





s_id 가 2008년 이상이고 2010년 이하인 자료
where s_id  betwwen '2008' and '2010;
where s_id >='2008'  and s_id = '2010'




whid character : %, _ (무조건 한글자 가지고 있는  
where 필드명 like '_' 

mysql> select name from student where name like '_';
+------+
| name |
+------+
| 셀   |
+------+
1 row in set (0.00 sec)





mysql> select * from student
    -> where belong like '%S%';
+----------+--------+---------+-------------+--------+
| s_id     | name   | belong  | phone       | status |
+----------+--------+---------+-------------+--------+
| 20090105 | 쵸파   | MUSIC   | 01012342433 |      3 |
| 20090503 | 피콜로 | MUSIC   | 01013634645 |      3 |
| 20100102 | 조로   | MUSIC   | 01023435343 |      2 |
| 20100505 | 오공   | MUSIC   | 01023534644 |      2 |
| 20110103 | 상디   | SPORTS  | 01021342443 |      1 |
| 20110106 | 프랑키 | ENGLISH | 01034343222 |      1 |
| 20110502 | 부우   | ENGLISH | 01034332634 |      1 |
| 20110506 | 오천   | SPORTS  | 01021334525 |      1 |
+----------+--------+---------+-------------+--------+
8 rows in set (0.00 sec)




S 또는 C

mysql> select * from student
    -> where belong in ('%S%');
Empty set (0.00 sec) 

* in ()안에 와일드카드는x 정확한 문자가 들어가야함.

mysql> select * from student
    -> where belong like '%S%' or belong like '%C%';
+----------+--------+----------+-------------+--------+
| s_id     | name   | belong   | phone       | status |
+----------+--------+----------+-------------+--------+
| 20080104 | 나미   | COMPUTER | 01023432432 |      3 |
| 20080501 | 크리링 | COMPUTER | 01023436346 |      2 |
| 20090101 | 루피   | COMPUTER | 01012345678 |      1 |
| 20090105 | 쵸파   | MUSIC    | 01012342433 |      3 |
| 20090301 | 에릭   | DANCE    | 01032424244 |      2 |
| 20090302 | 전진   | COMPUTER | 01012321313 |      3 |
| 20090503 | 피콜로 | MUSIC    | 01013634645 |      3 |
| 20090509 | 셀     | DANCE    | 01032427535 |      3 |
| 20100102 | 조로   | MUSIC    | 01023435343 |      2 |
| 20100204 | 버기   | DANCE    | 01023424343 |      2 |
| 20100505 | 오공   | MUSIC    | 01023534644 |      2 |
| 20100507 | 베지터 | DANCE    | 01023423623 |      2 |
| 20110103 | 상디   | SPORTS   | 01021342443 |      1 |
| 20110106 | 프랑키 | ENGLISH  | 01034343222 |      1 |
| 20110502 | 부우   | ENGLISH  | 01034332634 |      1 |
| 20110506 | 오천   | SPORTS   | 01021334525 |      1 |
+----------+--------+----------+-------------+--------+
16 rows in set (0.00 sec)



selet * from student
where name >=10


staus 2 또는 3인 자료 중에 ( in)
belong에 C를 포함하는 자료들을 (like) 
s_id, name, belong, stauts를 출력
name에 대해서 내림차순으로 출력

select s_id, name, belong, status from student
where status in (2 ,3) and belong like '%C%'
order by name desc;


mysql> select s_id, name, belong, status from student
    -> where status in (2 ,3) and belong like '%C%'
    -> order by name desc;
+----------+--------+----------+--------+
| s_id     | name   | belong   | status |
+----------+--------+----------+--------+
| 20090503 | 피콜로 | MUSIC    |      3 |
| 20080501 | 크리링 | COMPUTER |      2 |
| 20090105 | 쵸파   | MUSIC    |      3 |
| 20100102 | 조로   | MUSIC    |      2 |
| 20090302 | 전진   | COMPUTER |      3 |
| 20100505 | 오공   | MUSIC    |      2 |
| 20090301 | 에릭   | DANCE    |      2 |
| 20090509 | 셀     | DANCE    |      3 |
| 20100507 | 베지터 | DANCE    |      2 |
| 20100204 | 버기   | DANCE    |      2 |
| 20080104 | 나미   | COMPUTER |      3 |
+----------+--------+----------+--------+
11 rows in set (0.00 sec)




select s_id as ID, name as 이름, belong as 소속, status as 상태  from student
where status in (2 ,3) and belong like '%C%'
order by name desc;





삭제 / 수정은 완전히 조심 !!!!

drop : 완전히 구조까지 삭제
delete : 내용만 삭제하는 것 ---- 조건을 주는 것을 명심. 

 mysql> select *from student;
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080104 | 나미      | COMPUTER | 01023432432 |      3 |
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
| 20090101 | 루피      | COMPUTER | 01012345678 |      1 |
| 20090105 | 쵸파      | MUSIC    | 01012342433 |      3 |
| 20090301 | 에릭      | DANCE    | 01032424244 |      2 |
| 20090302 | 전진      | COMPUTER | 01012321313 |      3 |
| 20090503 | 피콜로    | MUSIC    | 01013634645 |      3 |
| 20090509 | 셀        | DANCE    | 01032427535 |      3 |
| 20100102 | 조로      | MUSIC    | 01023435343 |      2 |
| 20100204 | 버기      | DANCE    | 01023424343 |      2 |
| 20100505 | 오공      | MUSIC    | 01023534644 |      2 |
| 20100507 | 베지터    | DANCE    | 01023423623 |      2 |
| 20110103 | 상디      | SPORTS   | 01021342443 |      1 |
| 20110106 | 프랑키    | ENGLISH  | 01034343222 |      1 |
| 20110502 | 부우      | ENGLISH  | 01034332634 |      1 |
| 20110506 | 오천      | SPORTS   | 01021334525 |      1 |
+----------+-----------+----------+-------------+--------+
16 rows in set (0.00 sec)

mysql> delete from student where name = '나미';
Query OK, 1 row affected (0.01 sec)

mysql> select *from student;
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
| 20090101 | 루피      | COMPUTER | 01012345678 |      1 |
| 20090105 | 쵸파      | MUSIC    | 01012342433 |      3 |
| 20090301 | 에릭      | DANCE    | 01032424244 |      2 |
| 20090302 | 전진      | COMPUTER | 01012321313 |      3 |
| 20090503 | 피콜로    | MUSIC    | 01013634645 |      3 |
| 20090509 | 셀        | DANCE    | 01032427535 |      3 |
| 20100102 | 조로      | MUSIC    | 01023435343 |      2 |
| 20100204 | 버기      | DANCE    | 01023424343 |      2 |
| 20100505 | 오공      | MUSIC    | 01023534644 |      2 |
| 20100507 | 베지터    | DANCE    | 01023423623 |      2 |
| 20110103 | 상디      | SPORTS   | 01021342443 |      1 |
| 20110106 | 프랑키    | ENGLISH  | 01034343222 |      1 |
| 20110502 | 부우      | ENGLISH  | 01034332634 |      1 |
| 20110506 | 오천      | SPORTS   | 01021334525 |      1 |
+----------+-----------+----------+-------------+--------+
15 rows in set (0.00 sec)


폰 번호 중에 343을 포함하는 자료를 삭제 
delete from student where phone like '%343%';


drop table 테이블명;
drop databases 데이터베이스명;


update 구문 --항상 조건을 달아서 처리 
update 테이블명 
            set 필드명1 = 값,
	     필드명2 =값
where 필드명 조건...




mysql> update student set phone='010-1111-2222';
Query OK, 16 rows affected (0.01 sec)
Rows matched: 16  Changed: 16  Warnings: 0

mysql> select *from student;
+----------+-----------+----------+---------------+--------+
| s_id     | name      | belong   | phone         | status |
+----------+-----------+----------+---------------+--------+
| 20080104 | 나미      | COMPUTER | 010-1111-2222 |      3 |
| 20080501 | 크리링    | COMPUTER | 010-1111-2222 |      2 |
| 20090101 | 루피      | COMPUTER | 010-1111-2222 |      1 |
| 20090105 | 쵸파      | MUSIC    | 010-1111-2222 |      3 |
| 20090301 | 에릭      | DANCE    | 010-1111-2222 |      2 |
| 20090302 | 전진      | COMPUTER | 010-1111-2222 |      3 |
| 20090503 | 피콜로    | MUSIC    | 010-1111-2222 |      3 |
| 20090509 | 셀        | DANCE    | 010-1111-2222 |      3 |
| 20100102 | 조로      | MUSIC    | 010-1111-2222 |      2 |
| 20100204 | 버기      | DANCE    | 010-1111-2222 |      2 |
| 20100505 | 오공      | MUSIC    | 010-1111-2222 |      2 |
| 20100507 | 베지터    | DANCE    | 010-1111-2222 |      2 |
| 20110103 | 상디      | SPORTS   | 010-1111-2222 |      1 |
| 20110106 | 프랑키    | ENGLISH  | 010-1111-2222 |      1 |
| 20110502 | 부우      | ENGLISH  | 010-1111-2222 |      1 |
| 20110506 | 오천      | SPORTS   | 010-1111-2222 |      1 |
+----------+-----------+----------+---------------+--------+
16 rows in set (0.00 sec)

=============================================

조로(s_id : 20100102)의 belong을 DANCE변경 
뮤직 -> 댄스 

update student set belong = 'DANCE'
where s_id = '20100102';

==============================================

name이 오공친구의
belong = 'Golf', phone ='119'    으로 변경


update student set belong = 'Golf' , phone ='119'
where name ='오공';

===============================================

CRUD
C : Create (Insert into ..구문)
R: Read(Select *from 테이블명 ..구문)
U : Update(Update table... 명 구문)
D : Delete(Delete from table.. 명 구문)


===============================================
**문제 **

dept 테이블 생성( 
-dept _id :기본키, 자동증가
-dept _name :문자  not null
-dept _loc :문자  not null 

data 입력
1. 기획부 서울
2. 영업1부 서울
3. 영업2부 부산
4. 영업3부 대구
5. 관리부 서울 

출력
전체 영업부 자료를 ID, NAME, LOCATION을 필드명으로 출력

영업 3부 삭제

관리부의 지역을 제주도로 변경 


==>
create table dept(
dept_id int primary key auto_increment,
dept_name varchar(20) not null,
dept_loc varchar(20) not null
);

insert into dept (dept_name, dept_loc)
values('기획부','서울'),
('영업1부','서울'),
('영업2부','부산'),
('영업3부','대구'),
('관리부','서울');

select dept_id as ID ,dept_name as NAME, dept_loc as LOCATION from dept
where dept_name like '영업%';


delete from dept where dept_name = '영업3부';


update dept set dept_loc = '제주도'
where dept_name ='관리부';


================================================================


구조변경 구문

--modify :필드명을 못 바꾸는것
alter table 테이블명
modify column 원래이름 타입..



change : 필드명까지 바꾸는 것
alter table 테이블명
mysql> alter table employee change salsry(바꾸기전) salary (바꿀꺼) int(타입;

modify column 원래이름 바꿀이름 타입..



mysql> alter table dept  
    -> change column dept_name name varchar(50);     // dept_name -> name , varchar(20) -> (50)
Query OK, 0 rows affected (0.07 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc dept;
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| dept_id  | int         | NO   | PRI | NULL    | auto_increment |
| name     | varchar(50) | YES  |     | NULL    |                |
| dept_loc | varchar(20) | NO   |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)




기본함수 
sum, avg ,count , max, min 


연산조건으로 묶을 그룹 지정 : group by
묶은 그룹의 결과에 대한 별도의 조건을 지정 : having


mysql> select *from student;
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080104 | 나미      | COMPUTER | 01023432432 |      3 |
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
| 20090101 | 루피      | COMPUTER | 01012345678 |      1 |
| 20090105 | 쵸파      | MUSIC    | 01012342433 |      3 |
| 20090301 | 에릭      | DANCE    | 01032424244 |      2 |
| 20090302 | 전진      | COMPUTER | 01012321313 |      3 |
| 20090503 | 피콜로    | MUSIC    | 01013634645 |      3 |
| 20090509 | 셀        | DANCE    | 01032427535 |      3 |
| 20100102 | 조로      | DANCE    | 01023435343 |      2 |
| 20100204 | 버기      | DANCE    | 01023424343 |      2 |
| 20100505 | 오공      | Golf     | 119         |      2 |
| 20100507 | 베지터    | DANCE    | 01023423623 |      2 |
| 20110103 | 상디      | SPORTS   | 01021342443 |      1 |
| 20110106 | 프랑키    | ENGLISH  | 01034343222 |      1 |
| 20110502 | 부우      | ENGLISH  | 01034332634 |      1 |
| 20110506 | 오천      | SPORTS   | 01021334525 |      1 |
+----------+-----------+----------+-------------+--------+
16 rows in set (0.00 sec)

mysql> select count(name) from student;       
+-------------+
| count(name) |
+-------------+
|          16 |
+-------------+
1 row in set (0.01 sec)

 
mysql> select count(*) from student;
+----------+
| count(*) |
+----------+
|       16 |
+----------+
1 row in set (0.00 sec)


mysql> select count(*) as TatalRow from student;
+----------+
| TatalRow |
+----------+
|       16 |
+----------+
1 row in set (0.00 sec)


소속이 컴퓨터인 아이들
mysql> select count(*) as count from student where belong = 'COMPUTER';
+-------+
| count |
+-------+
|     4 |
+-------+
1 row in set (0.00 sec)



Belong    	count
==================
computer 	4
dance 		2
sports 		3 
이렇게 출력 하고 싶을 때 



mysql> select belong as Belong, count(*) as Count from student
    -> group by belong;
+----------+-------+
| Belong   | Count |
+----------+-------+
| COMPUTER |     4 |
| MUSIC    |     2 |
| DANCE    |     5 |
| Golf     |     1 |
| SPORTS   |     2 |
| ENGLISH  |     2 |
+----------+-------+
6 rows in set (0.00 sec)

mysql> select belong as Belong, count(*) as Count from student
group by belong
oredr by belong asc;


select belong as Belong, count(*) as Count from student
group by belong
oredr by count(*) asc;



select belong as Belong, count(*) as BelongCount from student
group by belong
oredr by BelongCount asc;


select belong as Belong, count(*) as BelongCount from student
group by belong
having BelongCount >=3
order by belong asc;


소속이 Computer 또는 Dance 그룹의 학생 수를
학생수의 내림차순으로 출력 

mysql> select  belong, count(*) as groupCount  from student
    -> where belong in ('Computer','Dance')
    -> group by belong
    -> order by groupCount desc;
+----------+------------+
| belong   | groupCount |
+----------+------------+
| DANCE    |          5 |
| COMPUTER |          4 |
+----------+------------+
2 rows in set (0.00 sec)


select  belong, count(*) as groupCount  from student 
where belong in ('Computer','Dance')      
group by belong
having groupCount >=5
order by groupCount desc;
+--------+------------+
| belong | groupCount |
+--------+------------+
| DANCE  |          5 |
+--------+------------+
1 row in set (0.00 sec)





**소속으로 묶어준 후에  소속인원수, status 합을구해주기

select belong as 소속, count(*) 인원수, sum(status) as 합
from student
group by belong;

+----------+-----------+------+
| 소속     | 인원수    | 합   |
+----------+-----------+------+
| COMPUTER |         4 |    9 |
| MUSIC    |         2 |    6 |
| DANCE    |         5 |   11 |
| Golf     |         1 |    2 |
| SPORTS   |         2 |    2 |
| ENGLISH  |         2 |    2 |
+----------+-----------+------+
6 rows in set (0.00 sec)


** 합계에 대해서 내림차순

select belong as 소속, count(*) 인원수, sum(status) as 합
from student
group by belong
order by 합 desc;

+----------+-----------+------+
| 소속     | 인원수    | 합   |
+----------+-----------+------+
| DANCE    |         5 |   11 |
| COMPUTER |         4 |    9 |
| MUSIC    |         2 |    6 |
| Golf     |         1 |    2 |
| SPORTS   |         2 |    2 |
| ENGLISH  |         2 |    2 |
+----------+-----------+------+
6 rows in set (0.00 sec)




mysql> select count(*), max(status),min(status),sum(status),avg(status)
    -> from student
    -> group by belong;
+----------+-------------+-------------+-------------+-------------+
| count(*) | max(status) | min(status) | sum(status) | avg(status) |
+----------+-------------+-------------+-------------+-------------+
|        4 |           3 |           1 |           9 |      2.2500 |
|        2 |           3 |           3 |           6 |      3.0000 |
|        5 |           3 |           2 |          11 |      2.2000 |
|        1 |           2 |           2 |           2 |      2.0000 |
|        2 |           1 |           1 |           2 |      1.0000 |
|        2 |           1 |           1 |           2 |      1.0000 |
+----------+-------------+-------------+-------------+-------------+
6 rows in set (0.00 sec)







-distinct : 중복을 제외한 데이터만..
-limit : 가지고올 갯수
-offset :가지고 오기 시작한  . 0번부터 시작 
select distinct *



mysql> select * from student limit 3 offset 0;               // 0번째부터 3개 가져오기 
+----------+-----------+----------+-------------+--------+
| s_id     | name      | belong   | phone       | status |
+----------+-----------+----------+-------------+--------+
| 20080104 | 나미      | COMPUTER | 01023432432 |      3 |
| 20080501 | 크리링    | COMPUTER | 01023436346 |      2 |
| 20090101 | 루피      | COMPUTER | 01012345678 |      1 |
+----------+-----------+----------+-------------+--------+
3 rows in set (0.00 sec)
 

=========================================================
아이돌그룹 테이블 만들기   //github  girlgroup  2개 파일 받아서 db 파일에

mysql -u root - p
111

mysql> create database idolgroup;
Query OK, 1 row affected (0.01 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| idolgroup          |
| information_schema |
| mysql              |
| performance_schema |
| sakila             |
| sys                |
| test_db            |
| world              |
+--------------------+
8 rows in set (0.00 sec)

mysql>  use idolgroup;
Database changed


mysql> source C:/$_HYOJIN/db/girl_song_schema.sql
Query OK, 0 rows affected (0.03 sec)

Query OK, 0 rows affected (0.02 sec)

mysql> source C:/$_HYOJIN/db/girl_song_data.sql
Query OK, 1 row affected (0.01 sec)

mysql> select* from song;
+-----+--------------------+---------------------------------------------------+
| _id | title              | lyrics                                            |
+-----+--------------------+---------------------------------------------------+
| 101 | Tell Me            | tell me tell me tetetete tel me                   |
| 102 | Gee                | GEE GEE GEE GEE GEE BABY BABY                     |
| 103 | 미스터             | 이름이 뭐야 미스터                                |
| 104 | Abracadabra        | 이러다 미쳐 내가 여리여리                         |
| 105 | 8282               | Give me a call Baby baby                          |
| 106 | 기대해             | 기대해                                            |
| 107 | I Don't car        | 다른 여자들의 다리를                              |
| 108 | Bad Girl Good Girl | 앞에선 한 마디 말도                               |
| 109 | 피노키오           | 뉴예삐오                                          |
| 110 | 별빛달빛           | 너는 내 별빛 내 마음의 별빛                       |
| 111 | A                  | A 워오우 워오우워 우우우                          |
| 112 | 나혼자             | 나 혼자 밥을 먹고 나 혼자 영화 보고               |
| 113 | LUV                | 설레이나요                                        |
| 114 | 짧은치마           | 짧은 치마를 입고 내가 길을 걸으면                 |
| 115 | 위아래             | 위 아래 위위 아래                                 |
| 116 | Dumb Dumb          | 너 땜에 하루종일                                  |
+-----+--------------------+---------------------------------------------------+
16 rows in set (0.00 sec)


https://app.diagrams.net/    - ER

svg 타입으로 저장  - 화면 안깨짐 


---------------------------------------------------------------------------
mysql> select g.name, g.debut,s.title, s.lyrics, s._id as songID
    -> from girl_group as g
    -> inner join song as s
    -> where g.hit_song_id = s._id;
+--------------------------+------------+--------------+----------------------------------------+--------+
| name                     | debut      | title        | lyrics                                 | songID |
+--------------------------+------------+--------------+----------------------------------------+--------+
| 원더걸스                 | 2007-09-12 | Tell Me      | tell me tell me tetetete tel me        |    101 |
| 소녀시대                 | 2009-06-03 | Gee          | GEE GEE GEE GEE GEE BABY BABY          |    102 |
| 카라                     | 2009-07-30 | 미스터       | 이름이 뭐야 미스터                     |    103 |
| 브라운아이드걸스         | 2008-01-17 | Abracadabra  | 이러다 미쳐 내가 여리여리              |    104 |
| 다비치                   | 2009-02-27 | 8282         | Give me a call Baby baby               |    105 |
| 2NE1                     | 2009-07-08 | I Don't car  | 다른 여자들의 다리를                   |    107 |
| f(x)                     | 2011-04-20 | 피노키오     | 뉴예삐오                               |    109 |
| 시크릿                   | 2011-01-06 | 별빛달빛     | 너는 내 별빛 내 마음의 별빛            |    110 |
| 레인보우                 | 2010-08-12 | A            | A 워오우 워오우워 우우우               |    111 |
+--------------------------+------------+--------------+----------------------------------------+--------+
9 rows in set (0.00 sec)


==================================================================================

mysql> select g.name, g.debut,s.title, s.lyrics, s._id as songID
    -> from girl_group as g
    -> inner join song as s
    -> where g.hit_song_id = s._id
    ->          and g.name = '원더걸스';
+--------------+------------+---------+---------------------------------+--------+
| name         | debut      | title   | lyrics                          | songID |
+--------------+------------+---------+---------------------------------+--------+
| 원더걸스     | 2007-09-12 | Tell Me | tell me tell me tetetete tel me |    101 |
+--------------+------------+---------+---------------------------------+--------+
1 row in set (0.00 sec)

==================================================================================

mysql> select g.name, g.debut,s.title, s.lyrics, s._id as songID
    -> from girl_group as g
    -> inner join song as s
    -> on g.hit_song_id = s._id          // 조인조건
    -> where g.name = '원더걸스';
+--------------+------------+---------+---------------------------------+--------+
| name         | debut      | title   | lyrics                          | songID |
+--------------+------------+---------+---------------------------------+--------+
| 원더걸스     | 2007-09-12 | Tell Me | tell me tell me tetetete tel me |    101 |
+--------------+------------+---------+---------------------------------+--------+
1 row in set (0.00 sec)


==================================================================================

mysql> select name, debut,title, lyrics, s._id as songID                       ** g. /s. 빼줘도 나옴  그래도 안전하게 붙혀주기.
    -> from girl_group as g   // (join song as s) 순서 상관없음
    -> inner join song as s    // (girl_group as g)
    -> on g.hit_song_id = s._id  ;
+--------------------------+------------+--------------+----------------------------------------+--------+
| name                     | debut      | title        | lyrics                                 | songID |
+--------------------------+------------+--------------+----------------------------------------+--------+
| 원더걸스                 | 2007-09-12 | Tell Me      | tell me tell me tetetete tel me        |    101 |
| 소녀시대                 | 2009-06-03 | Gee          | GEE GEE GEE GEE GEE BABY BABY          |    102 |
| 카라                     | 2009-07-30 | 미스터       | 이름이 뭐야 미스터                     |    103 |
| 브라운아이드걸스         | 2008-01-17 | Abracadabra  | 이러다 미쳐 내가 여리여리              |    104 |
| 다비치                   | 2009-02-27 | 8282         | Give me a call Baby baby               |    105 |
| 2NE1                     | 2009-07-08 | I Don't car  | 다른 여자들의 다리를                   |    107 |
| f(x)                     | 2011-04-20 | 피노키오     | 뉴예삐오                               |    109 |
| 시크릿                   | 2011-01-06 | 별빛달빛     | 너는 내 별빛 내 마음의 별빛            |    110 |
| 레인보우                 | 2010-08-12 | A            | A 워오우 워오우워 우우우               |    111 |
+--------------------------+------------+--------------+----------------------------------------+--------+
9 rows in set (0.00 sec)
==================================================================================



======================================
걸그룹 이름, 소속사이름, 데뷔일, 대표곡 출력
alias
girl_grop -> g      
song -> s
entertainment -> e

select g.name, e.name, g.debut, s.title
from entertainment e
inner join girl_group g
on e.e_id = g.enter_id
inner join song s
on s.s_id = g.hit_song_id;   // inner join 일치하는 것만 출력 

==>
+--------------------------+-----------+------------+--------------+
| name                     | name      | debut      | title        |
+--------------------------+-----------+------------+--------------+
| 원더걸스                 | JYP       | 2007-09-12 | Tell Me      |
| 소녀시대                 | SM        | 2009-06-03 | Gee          |
| 카라                     | SM        | 2009-07-30 | 미스터       |
| 브라운아이드걸스         | 안테나    | 2008-01-17 | Abracadabra  |
| 다비치                   | 하이브    | 2009-02-27 | 8282         |
| 2NE1                     | JYP       | 2009-07-08 | I Don't car  |
| f(x)                     | 하이브    | 2011-04-20 | 피노키오     |
| 시크릿                   | 하이브    | 2011-01-06 | 별빛달빛     |
| 레인보우                 | 안테나    | 2010-08-12 | A            |
+--------------------------+-----------+------------+--------------+
9 rows in set (0.00 sec)


====================================================================

*jyp, sm만 출력 
select g.name, e.name, g.debut, s.title
from entertainment e
inner join girl_group g
on e.e_id = g.enter_id
inner join song s
on s.s_id = g.hit_song_id
where e.name in ('sm','jyp');    

+--------------+------+------------+-------------+
| name         | name | debut      | title       |
+--------------+------+------------+-------------+
| 원더걸스     | JYP  | 2007-09-12 | Tell Me     |
| 소녀시대     | SM   | 2009-06-03 | Gee         |
| 카라         | SM   | 2009-07-30 | 미스터      |
| 2NE1         | JYP  | 2009-07-08 | I Don't car |
+--------------+------+------------+-------------+
4 rows in set (0.00 sec)






==================================
select g.name, e.name from entertainment e
join girl_group g
on e.e_id = g.enter_id;


+--------------------------+-----------+
| name                     | name      |
+--------------------------+-----------+
| 원더걸스                 | JYP       |
| 소녀시대                 | SM        |
| 카라                     | SM        |
| 브라운아이드걸스         | 안테나    |
| 다비치                   | 하이브    |
| 2NE1                     | JYP       |
| f(x)                     | 하이브    |
| 시크릿                   | 하이브    |
| 레인보우                 | 안테나    |
| 에프터 스쿨              | SM        |
| 포미닛                   | JYP       |
+--------------------------+-----------+
11 rows in set (0.00 sec)






====================================================================
SM 소속의 그룹 이름, 히트곡 제목, 가사를 출력 



select e.name, g.name, s.title,s.lyrics
from entertainment e
inner join girl_group g
on e.e_id = g.enter_id
inner join song s
on g.hit_song_id = s.s_id
where e.name ='sm'
order by g.name desc;


======================================================================

https://dev.mysql.com/

select * from song as s
inner join girl_group as g
on s.s_id = g.hit_song_id
inner join entertainment as e
on g.enter_id = e.e_id;

1.가사에 me를 포함하는 자료의
소속사, 그룹이름,노래제목, 가사를 
출력합니다.

select e.name, g.name, s.title,s.lyrics
from song as s
inner join girl_group as g
on s.s_id = g.hit_song_id
inner join entertainment as e
on g.enter_id = e.e_id
where lyrics like '%me%';

2. 소속사별 소속그룹의 수를 출력

select e.name,count(*) as 그룹수
from entertainment e
join girl_group g
on e.e_id = g.enter_id
group by e.name ;



inner join : join 하는 테이블에 공통적으로 함께 있는 
 	  자료들을 추출 



                                 (기준)
select g.g_id,g.name,title from girl_group g
left join song s
on g.hit_song_id = s.s_id;

mysql> select g.g_id,g.name,title from girl_group g
    -> left join song s
    -> on g.hit_song_id = s.s_id;
+------+------------------+-------------+
| g_id | name             | title       |
+------+------------------+-------------+
|    1 | 원더걸스         | Tell Me     |
|    2 | 소녀시대         | Gee         |
|    3 | 카라             | 미스터      |
|    4 | 브라운아이드걸스 | Abracadabra |
|    5 | 다비치           | 8282        |
|    6 | 2NE1             | I Don't car |
|    7 | f(x)             | 피노키오    |
|    8 | 시크릿           | 별빛달빛    |
|    9 | 레인보우         | A           |
|   10 | 에프터 스쿨      | NULL        |
|   11 | 포미닛           | NULL        |
+------+------------------+-------------+
11 rows in set (0.00 sec)




                                 (기준)
select g.g_id,g.name,title from girl_group g
right join song s
on g.hit_song_id = s.s_id;


mysql> select g.g_id,g.name,title from girl_group g
    -> right join song s
    -> on g.hit_song_id = s.s_id;
+------+------------------+--------------------+
| g_id | name             | title              |
+------+------------------+--------------------+
|    1 | 원더걸스         | Tell Me            |
|    2 | 소녀시대         | Gee                |
|    3 | 카라             | 미스터             |
|    4 | 브라운아이드걸스 | Abracadabra        |
|    5 | 다비치           | 8282               |
| NULL | NULL             | 기대해             |
|    6 | 2NE1             | I Don't car        |
| NULL | NULL             | Bad Girl Good Girl |
|    7 | f(x)             | 피노키오           |
|    8 | 시크릿           | 별빛달빛           |
|    9 | 레인보우         | A                  |
| NULL | NULL             | 나혼자             |
| NULL | NULL             | LUV                |
| NULL | NULL             | 짧은치마           |
| NULL | NULL             | 위아래             |
| NULL | NULL             | Dumb Dumb          |
+------+------------------+--------------------+
16 rows in set (0.00 sec)







create table employee(
id int primary key auto_increment,
name varchar(10),
superior_id int);

insert into employee ( name , superior_id)
values('김사장', null),
('정과장', 1),
('최대리', 2),
('이대리', 2),
('박고문', null);

mysql> select * from employee;
+----+--------+-------------+
| id | name   | superior_id |
+----+--------+-------------+
|  1 | 김사장 |        NULL |
|  2 | 정과장 |           1 |
|  3 | 최대리 |           2 |
|  4 | 이대리 |           2 |
|  5 | 박고문 |        NULL |
+----+--------+-------------+




mysql> select em1.id, em1.name as '직원', em2.name as '상사'
    -> from employee as em1
    -> inner join employee as em2
    -> on em1.superior_id = em2.id;
+----+--------+--------+
| id | 직원   | 상사   |
+----+--------+--------+
|  2 | 정과장 | 김사장 |
|  3 | 최대리 | 정과장 |
|  4 | 이대리 | 정과장 |
+----+--------+--------+
3 rows in set (0.00 sec)





서브 쿼리 (subquery)


노래 제목이 '미스터'인 그룹의 소속사를 4로 변경하는 작업

1. song 테이블에서 title 이 '미스터'인 s_id를 찾는다.
select s_id from song where title ='미스터';
====>
+------+
| s_id |
+------+
|  103 |
+------+

2. girl_group 테이블에서 s_id 와 같은 hit_song_id를 찾아 enter_id를 수정한다.
  
update girl_group set enter_id = 4
where hit_song_id =(select s_id from song where title ='미스터');
===>
mysql> select *from girl_group;
+------+------------------+------------+-------------+----------+
| g_id | name             | debut      | hit_song_id | enter_id |
+------+------------------+------------+-------------+----------+
|    1 | 원더걸스         | 2007-09-12 |         101 |        2 |
|    2 | 소녀시대         | 2009-06-03 |         102 |        1 |
|    3 | 카라             | 2009-07-30 |         103 |        4 |
|    4 | 브라운아이드걸스 | 2008-01-17 |         104 |        3 |
|    5 | 다비치           | 2009-02-27 |         105 |        4 |
|    6 | 2NE1             | 2009-07-08 |         107 |        2 |
|    7 | f(x)             | 2011-04-20 |         109 |        4 |
|    8 | 시크릿           | 2011-01-06 |         110 |        4 |
|    9 | 레인보우         | 2010-08-12 |         111 |        3 |
|   10 | 에프터 스쿨      | 2009-11-25 |        NULL |        1 |
|   11 | 포미닛           | 2009-08-28 |        NULL |        2 |
+------+------------------+------------+-------------+----------+




노래 가사에 Give를 포함하는 자료를 girl_group에서 찾아서 출력
 
 1. song 테이블에서 lyrics에 "Give" 포함하는 자료

select s_id  from song where lyrics like '%Give%';

select * from girl_group
where hit_song_id = (select s_id  from song where lyrics like '%Give%');




노래 가사에 e를 포함한 자료를 girl_group에서 찾아서 출력
select * from girl_group
where hit_song_id in(select s_id  from song where lyrics like '%e%');



노래 가사에 Give를 포함하는 자료를 girl_group에서 찾아서 삭제

delete from girl_group 
where hit_song_id =
(select s_id  from song where lyrics like '%Give%');





함수**

문제1> 1에서 10까지의 램덤 한 수를 출력하세요. 
 select FLOOR(rand() *10  +1);

문제2> 로또번호 6개를 다음의 형식으로 출력하


select FLOOR(rand() *44  +1) as 1st,
FLOOR(rand() *44  +1) as 2st,
FLOOR(rand() *44  +1) as 3st,
FLOOR(rand() *44  +1) as 4st,
FLOOR(rand() *44  +1) as 5st,
FLOOR(rand() *44  +1) as 6st;

====================================


select name from girl_group
where char_length(name) = 3;

mysql> select name from girl_group
    -> where char_length(name) = 3;
+--------+
| name   |
+--------+
| 시크릿 |
| 포미닛 |
+--------+


=====================================
문제4> 아래 email에서 id 만 추출해 주세요. 
test999@gmail.com
==>
SELECT SUBSTRING_INDEX('test999@gmail.com','@',1);
mysql> SELECT SUBSTRING_INDEX('test999@gmail.com','@',1);
+--------------------------------------------+
| SUBSTRING_INDEX('test999@gmail.com','@',1) |
+--------------------------------------------+
| test999                                    |
+--------------------------------------------+
1 row in set (0.00 sec)

문제5> 아래 주소 중에서 ① 도로명과 괄호안의 ② 동 명칭을 추출하세요.
▶ 사전작업
mysql> create table test (addr varchar(100));
Query OK, 0 rows affected (0.15 sec)
mysql> insert into test values ('서울특별시 용산구 서빙고로 137 (용산동6가)');
Query OK, 1 row affected (0.05 sec)
mysql> select * from test;
1.
mysql> select substring_index(addr,' ' ,3) from test; 
+------------------------------+
| substring_index(addr,' ' ,3) |
+------------------------------+
| 서울특별시 용산구 서빙고로   |
+------------------------------+
1 row in set (0.00 sec)

mysql> select substring_index(substring_index(addr,' ' ,3), ' ' , -1) as 도로명  from test;
+----------+
| 도로명   |
+----------+
| 서빙고로 |
+----------+
1 row in set (0.00 sec)


2. select substring_index(addr, '(' ,-1) from test;

mysql> select substring_index(substring_index(addr,'(' ,-1), ')' ,1 ) as 동주소 from test;
+-----------+
| 동주소    |
+-----------+
| 용산동6가 |
+-----------+
1 row in set (0.00 sec)



create table test( 
addr varchar(100) not null,
insert_date date default (current_date)     ---  오늘날짜 주려면
);


================================================================

그룹이 데뷔한 해가...

데뷔년도          그룹수 
===================
2007		1
2008		1
2009		5	



select year(debut) as 데뷔년도 , count(debut) as 그룹수 from girl_Group
group by 데뷔년도
order by 데뷔년도 asc;


mysql> select year(debut) as 데뷔년도 , count(*) as 그룹수 from girl_Group
    -> group by 데뷔년도
    -> order by 데뷔년도 asc;
+----------+--------+
| 데뷔년도 | 그룹수 |
+----------+--------+
|     2007 |      1 |
|     2008 |      1 |
|     2009 |      5 |
|     2010 |      1 |
|     2011 |      2 |
+----------+--------+


=============================================================

https://dev.mysql.com/

select * from song as s
inner join girl_group as g
on s.s_id = g.hit_song_id
inner join entertainment as e
on g.enter_id = e.e_id;

1.가사에 me를 포함하는 자료의
소속사, 그룹이름,노래제목, 가사를 
출력합니다.

select e.name, g.name, s.title,s.lyrics
from song as s
inner join girl_group as g
on s.s_id = g.hit_song_id
inner join entertainment as e
on g.enter_id = e.e_id
where lyrics like '%me%';

2. 소속사별 소속그룹의 수를 출력

select e.name,count(*) as 그룹수
from entertainment e
join girl_group g
on e.e_id = g.enter_id
group by e.name ;



inner join : join 하는 테이블에 공통적으로 함께 있는 
 	  자료들을 추출 



                                 (기준)
select g.g_id,g.name,title from girl_group g
left join song s
on g.hit_song_id = s.s_id;

mysql> select g.g_id,g.name,title from girl_group g
    -> left join song s
    -> on g.hit_song_id = s.s_id;
+------+------------------+-------------+
| g_id | name             | title       |
+------+------------------+-------------+
|    1 | 원더걸스         | Tell Me     |
|    2 | 소녀시대         | Gee         |
|    3 | 카라             | 미스터      |
|    4 | 브라운아이드걸스 | Abracadabra |
|    5 | 다비치           | 8282        |
|    6 | 2NE1             | I Don't car |
|    7 | f(x)             | 피노키오    |
|    8 | 시크릿           | 별빛달빛    |
|    9 | 레인보우         | A           |
|   10 | 에프터 스쿨      | NULL        |
|   11 | 포미닛           | NULL        |
+------+------------------+-------------+
11 rows in set (0.00 sec)




                                 (기준)
select g.g_id,g.name,title from girl_group g
right join song s
on g.hit_song_id = s.s_id;


mysql> select g.g_id,g.name,title from girl_group g
    -> right join song s
    -> on g.hit_song_id = s.s_id;
+------+------------------+--------------------+
| g_id | name             | title              |
+------+------------------+--------------------+
|    1 | 원더걸스         | Tell Me            |
|    2 | 소녀시대         | Gee                |
|    3 | 카라             | 미스터             |
|    4 | 브라운아이드걸스 | Abracadabra        |
|    5 | 다비치           | 8282               |
| NULL | NULL             | 기대해             |
|    6 | 2NE1             | I Don't car        |
| NULL | NULL             | Bad Girl Good Girl |
|    7 | f(x)             | 피노키오           |
|    8 | 시크릿           | 별빛달빛           |
|    9 | 레인보우         | A                  |
| NULL | NULL             | 나혼자             |
| NULL | NULL             | LUV                |
| NULL | NULL             | 짧은치마           |
| NULL | NULL             | 위아래             |
| NULL | NULL             | Dumb Dumb          |
+------+------------------+--------------------+
16 rows in set (0.00 sec)







create table employee(
id int primary key auto_increment,
name varchar(10),
superior_id int);

insert into employee ( name , superior_id)
values('김사장', null),
('정과장', 1),
('최대리', 2),
('이대리', 2),
('박고문', null);

mysql> select * from employee;
+----+--------+-------------+
| id | name   | superior_id |
+----+--------+-------------+
|  1 | 김사장 |        NULL |
|  2 | 정과장 |           1 |
|  3 | 최대리 |           2 |
|  4 | 이대리 |           2 |
|  5 | 박고문 |        NULL |
+----+--------+-------------+




mysql> select em1.id, em1.name as '직원', em2.name as '상사'
    -> from employee as em1
    -> inner join employee as em2
    -> on em1.superior_id = em2.id;
+----+--------+--------+
| id | 직원   | 상사   |
+----+--------+--------+
|  2 | 정과장 | 김사장 |
|  3 | 최대리 | 정과장 |
|  4 | 이대리 | 정과장 |
+----+--------+--------+
3 rows in set (0.00 sec)





서브 쿼리 (subquery)


노래 제목이 '미스터'인 그룹의 소속사를 4로 변경하는 작업

1. song 테이블에서 title 이 '미스터'인 s_id를 찾는다.
select s_id from song where title ='미스터';
====>
+------+
| s_id |
+------+
|  103 |
+------+

2. girl_group 테이블에서 s_id 와 같은 hit_song_id를 찾아 enter_id를 수정한다.
  
update girl_group set enter_id = 4
where hit_song_id =(select s_id from song where title ='미스터');
===>
mysql> select *from girl_group;
+------+------------------+------------+-------------+----------+
| g_id | name             | debut      | hit_song_id | enter_id |
+------+------------------+------------+-------------+----------+
|    1 | 원더걸스         | 2007-09-12 |         101 |        2 |
|    2 | 소녀시대         | 2009-06-03 |         102 |        1 |
|    3 | 카라             | 2009-07-30 |         103 |        4 |
|    4 | 브라운아이드걸스 | 2008-01-17 |         104 |        3 |
|    5 | 다비치           | 2009-02-27 |         105 |        4 |
|    6 | 2NE1             | 2009-07-08 |         107 |        2 |
|    7 | f(x)             | 2011-04-20 |         109 |        4 |
|    8 | 시크릿           | 2011-01-06 |         110 |        4 |
|    9 | 레인보우         | 2010-08-12 |         111 |        3 |
|   10 | 에프터 스쿨      | 2009-11-25 |        NULL |        1 |
|   11 | 포미닛           | 2009-08-28 |        NULL |        2 |
+------+------------------+------------+-------------+----------+




노래 가사에 Give를 포함하는 자료를 girl_group에서 찾아서 출력
 
 1. song 테이블에서 lyrics에 "Give" 포함하는 자료

select s_id  from song where lyrics like '%Give%';

select * from girl_group
where hit_song_id = (select s_id  from song where lyrics like '%Give%');




노래 가사에 e를 포함한 자료를 girl_group에서 찾아서 출력
select * from girl_group
where hit_song_id in(select s_id  from song where lyrics like '%e%');



노래 가사에 Give를 포함하는 자료를 girl_group에서 찾아서 삭제

delete from girl_group 
where hit_song_id =
(select s_id  from song where lyrics like '%Give%');





함수**

문제1> 1에서 10까지의 램덤 한 수를 출력하세요. 
 select FLOOR(rand() *10  +1);

문제2> 로또번호 6개를 다음의 형식으로 출력하


select FLOOR(rand() *44  +1) as 1st,
FLOOR(rand() *44  +1) as 2st,
FLOOR(rand() *44  +1) as 3st,
FLOOR(rand() *44  +1) as 4st,
FLOOR(rand() *44  +1) as 5st,
FLOOR(rand() *44  +1) as 6st;

====================================


select name from girl_group
where char_length(name) = 3;

mysql> select name from girl_group
    -> where char_length(name) = 3;
+--------+
| name   |
+--------+
| 시크릿 |
| 포미닛 |
+--------+


=====================================
문제4> 아래 email에서 id 만 추출해 주세요. 
test999@gmail.com
==>
SELECT SUBSTRING_INDEX('test999@gmail.com','@',1);
mysql> SELECT SUBSTRING_INDEX('test999@gmail.com','@',1);
+--------------------------------------------+
| SUBSTRING_INDEX('test999@gmail.com','@',1) |
+--------------------------------------------+
| test999                                    |
+--------------------------------------------+
1 row in set (0.00 sec)

문제5> 아래 주소 중에서 ① 도로명과 괄호안의 ② 동 명칭을 추출하세요.
▶ 사전작업
mysql> create table test (addr varchar(100));
Query OK, 0 rows affected (0.15 sec)
mysql> insert into test values ('서울특별시 용산구 서빙고로 137 (용산동6가)');
Query OK, 1 row affected (0.05 sec)
mysql> select * from test;
1.
mysql> select substring_index(addr,' ' ,3) from test; 
+------------------------------+
| substring_index(addr,' ' ,3) |
+------------------------------+
| 서울특별시 용산구 서빙고로   |
+------------------------------+
1 row in set (0.00 sec)

mysql> select substring_index(substring_index(addr,' ' ,3), ' ' , -1) as 도로명  from test;
+----------+
| 도로명   |
+----------+
| 서빙고로 |
+----------+
1 row in set (0.00 sec)


2. select substring_index(addr, '(' ,-1) from test;

mysql> select substring_index(substring_index(addr,'(' ,-1), ')' ,1 ) as 동주소 from test;
+-----------+
| 동주소    |
+-----------+
| 용산동6가 |
+-----------+
1 row in set (0.00 sec)



create table test( 
addr varchar(100) not null,
insert_date date default (current_date)     ---  오늘날짜 주려면
);


================================================================

그룹이 데뷔한 해가...

데뷔년도          그룹수 
===================
2007		1
2008		1
2009		5	



select year(debut) as 데뷔년도 , count(debut) as 그룹수 from girl_Group
group by 데뷔년도
order by 데뷔년도 asc;


mysql> select year(debut) as 데뷔년도 , count(*) as 그룹수 from girl_Group
    -> group by 데뷔년도
    -> order by 데뷔년도 asc;
+----------+--------+
| 데뷔년도 | 그룹수 |
+----------+--------+
|     2007 |      1 |
|     2008 |      1 |
|     2009 |      5 |
|     2010 |      1 |
|     2011 |      2 |
+----------+--------+



12/19

select timestampdiff(year, '2004-8-31', curdate())

+---------------------------------------------+
| timestampdiff(year, '2004-8-31', curdate()) |
+---------------------------------------------+
|                                          20         |
+---------------------------------------------+


mysql> select timestampdiff(month, '2004-8-31', curdate())
    ->
    -> ;
+----------------------------------------------+
| timestampdiff(month, '2004-8-31', curdate()) |
+----------------------------------------------+
|                                          243 |
+----------------------------------------------+
1 row in set (0.00 sec)

mysql> select timestampdiff(day, '1996-06-11', curdate())
    -> ;
+---------------------------------------------+
| timestampdiff(day, '1996-06-11', curdate()) |
+---------------------------------------------+
|                                       10418 |
+---------------------------------------------+
1 row in set (0.00 sec)

<<문제>>

1.아이돌 장원영(2004-8-31), 안유진(2003-9-1)의 만 나이를 구해 주세요
select timestampdiff(year, '2004-8-31', curdate());

아이브 이서가 책을 2024-02-28에 빌려 갔습니다. 오늘까지 며칠째 책을 갖고 있나요.
select timestampdiff(day, '2024-12-18', curdate());





mysql> select last_day(now());
+-----------------+
| last_day(now()) |
+-----------------+
| 2024-12-31      |
+-----------------+
1 row in set (0.00 sec)

mysql> select now() -interval 1 month;
+-------------------------+
| now() -interval 1 month |
+-------------------------+
| 2024-11-19 14:35:46     |
+-------------------------+
1 row in set (0.00 sec)

mysql> select last_day(now() -interval 1 month);
+-----------------------------------+
| last_day(now() -interval 1 month) |
+-----------------------------------+
| 2024-11-30                        |
+-----------------------------------+
1 row in set (0.00 sec)

mysql> select last_day(now() -interval 2 month);
+-----------------------------------+
| last_day(now() -interval 2 month) |
+-----------------------------------+
| 2024-10-31                        |
+-----------------------------------+
1 row in set (0.00 sec)

mysql> select last_day(now() -interval 2 month) + interval 1 day;
+----------------------------------------------------+
| last_day(now() -interval 2 month) + interval 1 day |
+----------------------------------------------------+
| 2024-11-01                                         |
+----------------------------------------------------+
1 row in set (0.00 sec)


IF, IFNULL함수

mysql> select name,ifnull( hit_song_id , '힛트곡 없음') from girl_group;
+------------------+--------------------------------------+
| name             | ifnull( hit_song_id , '힛트곡 없음') |
+------------------+--------------------------------------+
| 원더걸스         | 101                                  |
| 소녀시대         | 102                                  |
| 카라             | 103                                  |
| 브라운아이드걸스 | 104                                  |
| 2NE1             | 107                                  |
| f(x)             | 109                                  |
| 시크릿           | 110                                  |
| 레인보우         | 111                                  |
| 에프터 스쿨      | 힛트곡 없음                          |
| 포미닛           | 힛트곡 없음                          |
+------------------+--------------------------------------+
10 rows in set (0.00 sec)



drop table if exists test2;
create table test2(f_id int primary key,
f_name varchar(10),
p_id int,
constraint fk_p_id
foreign key(p_id)
references test1(p_id) on delete cascade  
);

drop table if exists test1;
create table test1(p_id int primary key,
p_name varchar(10));


insert into test1 values(1, '아이브');

insert into test2 values(1, '장원영', 1);



트랜직션
mysql> start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from test1;
+------+--------+
| p_id | p_name |
+------+--------+
|    4 | 뉴진스 |
+------+--------+
1 row in set (0.00 sec)

mysql> update test1 set p_name = '세븐틴' where p_id = 4;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select *From test1;
+------+--------+
| p_id | p_name |
+------+--------+
|    4 | 세븐틴 |
+------+--------+
1 row in set (0.00 sec)

mysql> rollback;
Query OK, 0 rows affected (0.00 sec)

mysql> select *from test1;
+------+--------+
| p_id | p_name |
+------+--------+
|    4 | 뉴진스 |
+------+--------+
1 row in set (0.00 sec)

mysql> update test1 set p_name = '세븐틴' where p_id = 4;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from test1;
+------+--------+
| p_id | p_name |
+------+--------+
|    4 | 세븐틴 |
+------+--------+
1 row in set (0.00 sec)

mysql> commit;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from test1;
+------+--------+
| p_id | p_name |
+------+--------+
|    4 | 세븐틴 |
+------+--------+
1 row in set (0.00 sec)




